<?xml version="1.0" encoding="UTF-8"?>

<web-app version="2.4" xmlns="http://java.sun.com/xml/ns/j2ee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd">

    <display-name>Tracker System</display-name>

	<!-- Declaration of the Struts 2 filter.  Since our entire web application will be a Struts 2
	     application, we will not have any other servlets or filters. 
	-->
    <filter>
        <filter-name>struts2</filter-name>
        <filter-class>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter</filter-class>
    </filter>

    <!-- Declaration of the Open-Session-In-View filter.  Since Hibernate's lazy loading prevents us from 
         loading deeper elements in the data structure before giving back control to the view layer, this filter
         helps us wrap a Hibernate session around the entire request-processing pipeline, including this view layer. 
         *** Useless in 3-tier-apps like this one ***
    -->    
    <!-- filter>
        <filter-name>springOpenSessionInViewFilter</filter-name>
        <filter-class>org.springframework.orm.hibernate3.support.OpenSessionInViewFilter</filter-class>
    </filter>
    -->
    <!-- filter-mapping>
        <filter-name>springOpenSessionInViewFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
    -->

    <!-- The Struts 2 filter should be mapped to ALL requests coming into the web application.  
         As a filter, it can let the non-struts requests pass through and they will arrive at which ever 
         servlets to which they may be mapped.
    -->
    <filter-mapping>
        <filter-name>struts2</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!-- Load Spring Listener to track key events in the web applications -->
	<listener>
	  <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	
	<context-param>
	    <param-name>contextConfigLocation</param-name>
	    <!-- param-value>/WEB-INF/app-context.xml</param-value-->
	    <!-- param-value>classpath*:/app-context.xml</param-value--> <!-- ll appContext.xml files under conf folders in all your jars on the classpath will be picked up and joined into one big application context. -->
	    <param-value>classpath:/application-context.xml</param-value>
	</context-param>

    <welcome-file-list>
        <welcome-file>index.html</welcome-file>
    </welcome-file-list>
 
</web-app>
