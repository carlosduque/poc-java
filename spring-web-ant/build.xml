<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project name="spring-web-ant" default="default" basedir=".">
    <description>Ant based Spring Web App</description>
    <!-- ==================================================== -->
    <!-- === Common settings ================================ -->
    <!-- ==================================================== -->
    <property file="build.properties" />
    <property file="build.info" />

    <property name="lib.dir" value="lib" />
    <property name="target.dir" value="dist" />
    <property name="build.dir" value="build" />

    <property name="main.src.dir" value="src/main/java" />
    <property name="main.dir" value="${build.dir}/main" />
    <property name="main.classes.dir" value="${main.dir}/classes" />
    <property name="main.metainf.dir" location="${main.classes.dir}/META-INF" />
    <property name="main.javadoc.dir" value="${build.dir}/javadoc" />

    <property name="main.conf.dir" value="src/main/resources" />

    <property name="test.src.dir" location="src/test/java" />
    <property name="test.classes.dir" location="${build.dir}/test/classes" />
    <property name="test.metainf.dir" location="${test.classes.dir}/META-INF" />
    <property name="test.report.data.dir" location="${build.dir}/reports/test/xml" />
    <property name="test.report.dir" location="${build.dir}/reports/test/html" />

    <property name="web.conf.dir" location="src/main/webapp" />

    <!-- Libraries -->
    <property name="compile.lib.dir" location="${lib.dir}/compile" />
    <property name="test.lib.dir" location="${lib.dir}/test" />
    <property name="deployment.dir" location="C:\Tools\JBoss\jboss-eap-6.4\standalone\deployments" />

    <!-- Project Classpath -->
    <path id="compile.libs.classpath">
        <fileset dir="${lib.dir}">
            <include name="**/*.jar" />
            <include name="**/*.zip" />
        </fileset>
    </path>

    <path id="test.libs.classpath">
        <fileset dir="${test.lib.dir}">
            <include name="*.jar" />
        </fileset>
    </path>

    <path id="artifacts.classpath">
        <fileset dir="${target.dir}">
            <include name="*.jar" />
        </fileset>
    </path>

    <!-- ==================================================== -->
    <!-- === Targets ======================================== -->
    <!-- ==================================================== -->
    <target name="clean" description="Remove automatically generated directories">
        <delete dir="${target.dir}" />
        <delete dir="${build.dir}" />
    </target>

    <target name="init" description="Create the directory structure">
        <mkdir dir="${target.dir}" />
        <mkdir dir="${main.classes.dir}" />
        <mkdir dir="${main.javadoc.dir}" />
        <mkdir dir="${main.metainf.dir}" />
        <mkdir dir="${test.classes.dir}" />
        <mkdir dir="${test.metainf.dir}" />
        <mkdir dir="${test.report.data.dir}" />
        <mkdir dir="${test.report.dir}" />

        <tstamp>
            <format property="NOW" pattern="yyyy-MM-dd HH:mm:sss" />
        </tstamp>
        <propertyfile file="build.info" comment="This file is automatically generated - DO NOT EDIT">
            <entry key="build.user" value="${user.name}" />
            <entry key="build.date" value="${NOW}" />
            <entry key="build.number" type="int" operation="+" default="000" pattern="000" />
            <entry key="build.id" value="${project.ver}.${build.number}" />
        </propertyfile>
        <property file="build.info" />
        <property name="main.jar.filename" value="${ant.project.name}.jar" />
        <property name="test.jar.filename" value="${ant.project.name}-tests.jar" />
    </target>

    <target name="compile" depends="init" description="Compile the source code">
        <javac destdir="${main.classes.dir}"
            source="${java.compiler.ver}"
            target="${java.compiler.ver}"
            srcdir="${main.src.dir}"
            encoding="${java.compiler.encoding}"
            debug="${java.compiler.debug}"
            includeAntRuntime="false">
            <src path="${main.src.dir}" />
            <classpath refid="compile.libs.classpath"/>
        </javac>
    </target>

    <target name="copy-resources" description="Copy resources">
        <copy todir="${web.classes.dir}">
            <fileset dir="${web.conf.dir}">
                <include name="**/*" />
            </fileset>
        </copy>
    </target>
    
    <target name="package-jar" depends="compile" description="Build the jar file">
        <manifest file="${main.metainf.dir}/MANIFEST.MF">
          <attribute name="Class-Path" value="." />
          <attribute name="Built-By" value="${user.name}" />
          <attribute name="Implementation-Version" value="${build.id}" />
          <attribute name="Built-Date" value="${NOW}" />
        </manifest>

        <jar destfile="${target.dir}/${main.jar.filename}"
            filesetmanifest="mergewithoutmain"
            basedir="${main.classes.dir}"
            manifest="${main.metainf.dir}/MANIFEST.MF">
            <fileset dir="${main.conf.dir}" />
        </jar>

    </target>

    <target name="package-war" depends="compile" description="Build the war file">
        <war destfile="${target.dir}/${ant.project.name}.war" webxml="${web.conf.dir}/WEB-INF/web.xml">
            <webinf dir="${web.conf.dir}/WEB-INF" />
            <classes dir="${main.classes.dir}"/>
            <lib dir="${compile.lib.dir}" />
            <!-- zipfileset dir="${web.conf.dir}/resources" prefix="resources" /-->
        </war>
    </target>
    
    <target name="compile-tests" depends="package-jar" description="Compile the tests source code">
        <javac destdir="${test.classes.dir}"
            source="${java.compiler.ver}"
            target="${java.compiler.ver}"
            debug="${java.compiler.debug}"
            includeAntRuntime="false">
            <src path="${test.src.dir}" />
            <classpath refid="test.libs.classpath"/>
            <classpath refid="compile.libs.classpath"/>
            <classpath refid="artifacts.classpath"/><!-- Test the final jar not the compiled classes -->
        </javac>
    </target>

    <target name="package-tests" depends="compile-tests" description="Build the jar file with tests only">
        <manifest file="${test.metainf.dir}/MANIFEST.MF">
            <attribute name="Built-By" value="${user.name}" />
            <attribute name="Implementation-Version" value="${build.id}" />
            <attribute name="Built-Date" value="${NOW}" />
            <attribute name="Main-Class" value="" />
        </manifest>
        <jar jarfile="${target.dir}/${test.jar.filename}"
            basedir="${test.classes.dir}"
            manifest="${test.metainf.dir}/MANIFEST.MF">
        </jar>
    </target>

    <target name="test" depends="package-tests" description="Run all tests">
        <junit printsummary="true"
            fork="true"
            forkMode="once"
            haltonfailure="false"
            errorProperty="test.failed.flag"
            failureProperty="test.failed.flag">
            <classpath>
                <path refid="test.libs.classpath" />
                <path refid="compile.libs.classpath" />
                <path refid="artifacts.classpath" />
            </classpath>
            <formatter type="brief" usefile="false" />
            <formatter type="xml" />
            <batchtest todir="${test.report.data.dir}">
                <resources>
                    <zipfileset src="${target.dir}/${test.jar.filename}" includes="**/*Test.class"/>
                </resources>
            </batchtest>
        </junit>
        <!-- Create html files using xsl from previously generated xml junit reports-->
        <junitreport todir="${test.report.data.dir}">
            <fileset dir="${test.report.data.dir}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${test.report.dir}"/>
        </junitreport>
        <!-- halt if the tests failed -->
        <fail if="test.failed.flag">Tests failed. Check reports at: ${test.report.dir}</fail>
    </target>

    <target name="explode-war" description="explode war files">
        <unwar 
            src="${target.dir}/${ant.project.name}.war" 
            dest="${target.dir}/${ant.project.name}x.war" 
            overwrite="true" >
        </unwar>
    </target>
    
    <target name="deploy-war" depends="explode-war" description="deploy war files">
        <copy todir="${deployment.dir}/${ant.project.name}.war" overwrite="true">
            <fileset dir="${target.dir}/${ant.project.name}x.war" />
        </copy>
    </target>
    
    <target name="default" depends="clean,test,package-war,explode-war, deploy-war" description="Run all the required targets to test and build the jar">
    </target>

</project>
