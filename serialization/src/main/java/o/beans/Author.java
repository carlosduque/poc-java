/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package o.beans;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Author extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8671367643135249694L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Author\",\"namespace\":\"o.beans\",\"fields\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"lastname\",\"type\":\"string\"},{\"name\":\"dob\",\"type\":\"long\"},{\"name\":\"books\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Book\",\"fields\":[{\"name\":\"title\",\"type\":\"string\"},{\"name\":\"pages\",\"type\":\"int\"}]}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Author> ENCODER =
      new BinaryMessageEncoder<Author>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Author> DECODER =
      new BinaryMessageDecoder<Author>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Author> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Author> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Author>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Author to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Author from a ByteBuffer. */
  public static Author fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence name;
  @Deprecated public java.lang.CharSequence lastname;
  @Deprecated public long dob;
  @Deprecated public java.util.List<o.beans.Book> books;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Author() {}

  /**
   * All-args constructor.
   * @param name The new value for name
   * @param lastname The new value for lastname
   * @param dob The new value for dob
   * @param books The new value for books
   */
  public Author(java.lang.CharSequence name, java.lang.CharSequence lastname, java.lang.Long dob, java.util.List<o.beans.Book> books) {
    this.name = name;
    this.lastname = lastname;
    this.dob = dob;
    this.books = books;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return name;
    case 1: return lastname;
    case 2: return dob;
    case 3: return books;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: name = (java.lang.CharSequence)value$; break;
    case 1: lastname = (java.lang.CharSequence)value$; break;
    case 2: dob = (java.lang.Long)value$; break;
    case 3: books = (java.util.List<o.beans.Book>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'name' field.
   * @return The value of the 'name' field.
   */
  public java.lang.CharSequence getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'lastname' field.
   * @return The value of the 'lastname' field.
   */
  public java.lang.CharSequence getLastname() {
    return lastname;
  }

  /**
   * Sets the value of the 'lastname' field.
   * @param value the value to set.
   */
  public void setLastname(java.lang.CharSequence value) {
    this.lastname = value;
  }

  /**
   * Gets the value of the 'dob' field.
   * @return The value of the 'dob' field.
   */
  public java.lang.Long getDob() {
    return dob;
  }

  /**
   * Sets the value of the 'dob' field.
   * @param value the value to set.
   */
  public void setDob(java.lang.Long value) {
    this.dob = value;
  }

  /**
   * Gets the value of the 'books' field.
   * @return The value of the 'books' field.
   */
  public java.util.List<o.beans.Book> getBooks() {
    return books;
  }

  /**
   * Sets the value of the 'books' field.
   * @param value the value to set.
   */
  public void setBooks(java.util.List<o.beans.Book> value) {
    this.books = value;
  }

  /**
   * Creates a new Author RecordBuilder.
   * @return A new Author RecordBuilder
   */
  public static o.beans.Author.Builder newBuilder() {
    return new o.beans.Author.Builder();
  }

  /**
   * Creates a new Author RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Author RecordBuilder
   */
  public static o.beans.Author.Builder newBuilder(o.beans.Author.Builder other) {
    return new o.beans.Author.Builder(other);
  }

  /**
   * Creates a new Author RecordBuilder by copying an existing Author instance.
   * @param other The existing instance to copy.
   * @return A new Author RecordBuilder
   */
  public static o.beans.Author.Builder newBuilder(o.beans.Author other) {
    return new o.beans.Author.Builder(other);
  }

  /**
   * RecordBuilder for Author instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Author>
    implements org.apache.avro.data.RecordBuilder<Author> {

    private java.lang.CharSequence name;
    private java.lang.CharSequence lastname;
    private long dob;
    private java.util.List<o.beans.Book> books;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(o.beans.Author.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.lastname)) {
        this.lastname = data().deepCopy(fields()[1].schema(), other.lastname);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.dob)) {
        this.dob = data().deepCopy(fields()[2].schema(), other.dob);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.books)) {
        this.books = data().deepCopy(fields()[3].schema(), other.books);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Author instance
     * @param other The existing instance to copy.
     */
    private Builder(o.beans.Author other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.lastname)) {
        this.lastname = data().deepCopy(fields()[1].schema(), other.lastname);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.dob)) {
        this.dob = data().deepCopy(fields()[2].schema(), other.dob);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.books)) {
        this.books = data().deepCopy(fields()[3].schema(), other.books);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public java.lang.CharSequence getName() {
      return name;
    }

    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public o.beans.Author.Builder setName(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.name = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public o.beans.Author.Builder clearName() {
      name = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'lastname' field.
      * @return The value.
      */
    public java.lang.CharSequence getLastname() {
      return lastname;
    }

    /**
      * Sets the value of the 'lastname' field.
      * @param value The value of 'lastname'.
      * @return This builder.
      */
    public o.beans.Author.Builder setLastname(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.lastname = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'lastname' field has been set.
      * @return True if the 'lastname' field has been set, false otherwise.
      */
    public boolean hasLastname() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'lastname' field.
      * @return This builder.
      */
    public o.beans.Author.Builder clearLastname() {
      lastname = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'dob' field.
      * @return The value.
      */
    public java.lang.Long getDob() {
      return dob;
    }

    /**
      * Sets the value of the 'dob' field.
      * @param value The value of 'dob'.
      * @return This builder.
      */
    public o.beans.Author.Builder setDob(long value) {
      validate(fields()[2], value);
      this.dob = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'dob' field has been set.
      * @return True if the 'dob' field has been set, false otherwise.
      */
    public boolean hasDob() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'dob' field.
      * @return This builder.
      */
    public o.beans.Author.Builder clearDob() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'books' field.
      * @return The value.
      */
    public java.util.List<o.beans.Book> getBooks() {
      return books;
    }

    /**
      * Sets the value of the 'books' field.
      * @param value The value of 'books'.
      * @return This builder.
      */
    public o.beans.Author.Builder setBooks(java.util.List<o.beans.Book> value) {
      validate(fields()[3], value);
      this.books = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'books' field has been set.
      * @return True if the 'books' field has been set, false otherwise.
      */
    public boolean hasBooks() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'books' field.
      * @return This builder.
      */
    public o.beans.Author.Builder clearBooks() {
      books = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Author build() {
      try {
        Author record = new Author();
        record.name = fieldSetFlags()[0] ? this.name : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.lastname = fieldSetFlags()[1] ? this.lastname : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.dob = fieldSetFlags()[2] ? this.dob : (java.lang.Long) defaultValue(fields()[2]);
        record.books = fieldSetFlags()[3] ? this.books : (java.util.List<o.beans.Book>) defaultValue(fields()[3]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Author>
    WRITER$ = (org.apache.avro.io.DatumWriter<Author>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Author>
    READER$ = (org.apache.avro.io.DatumReader<Author>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
